apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      # Scrape Prometheus itself
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      # Scrape Spring Boot app actuator endpoint
      - job_name: 'springboot-app'
        metrics_path: '/actuator/prometheus'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - allinone
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: allinone
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:v2.52.0
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: config-volume
              mountPath: /etc/prometheus
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-config
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
spec:
  type: NodePort
  ports:
    - port: 9090
      targetPort: 9090
      nodePort: 30090
  selector:
    app: prometheus
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
  labels:
    grafana_dashboard: "1"
data:
  my-dashboard.json: |
    {
      "id": null,
      "uid": "custom-dashboard",
      "title": "My Spring Boot Metrics",
      "tags": [ "spring", "custom" ],
      "timezone": "browser",
      "schemaVersion": 36,
      "version": 1,
      "panels": [
        {
          "type": "graph",
          "title": "JVM Memory Used",
          "targets": [
            {
              "expr": "jvm_memory_used_bytes",
              "legendFormat": "{{area}}"
            }
          ],
          "datasource": "Prometheus"
        },
        {
          "type": "graph",
          "title": "HTTP Requests",
          "targets": [
            {
              "expr": "rate(http_server_requests_seconds_count[1m])",
              "legendFormat": "{{method}} {{uri}}"
            }
          ],
          "datasource": "Prometheus"
        }
      ]
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
  labels:
    grafana_datasource: "1"
data:
  datasource.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus.monitoring.svc.cluster.local:9090
        isDefault: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.0.0
          ports:
            - containerPort: 3000
          volumeMounts:
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-dashboards
              mountPath: /etc/grafana/provisioning/dashboards
      volumes:
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  type: NodePort
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 30070
  selector:
    app: grafana
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-scrape
rules:
  - apiGroups: [""]
    resources:
      - endpoints
      - services
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-scrape
subjects:
  - kind: ServiceAccount
    name: default
    namespace: monitoring   # namespace where the service account is created
roleRef:
  kind: ClusterRole
  name: prometheus-scrape
  apiGroup: rbac.authorization.k8s.io