# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

default:
  image: gradle:8.7-jdk21

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - docker
  - deploy

include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml

variables:
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
  IMAGE_NAME: $CI_REGISTRY_IMAGE/k8sdemo
  DOCKER_DRIVER: overlay2
#  KUBECONFIG: "$CI_PROJECT_DIR/kubeconfig.yaml"

#cache:
#  key: ${CI_COMMIT_REF_SLUG}
#  paths:
#    - .gradle/wrapper
#    - .gradle/caches

#before_script:
#  - chmod +x ./gradlew  # if using the Gradle wrapper
#  - ./gradlew --version

build-job:       # This job runs in the build stage, which runs first.
#  image: gradle:8.7-jdk21
  stage: build
  script:
    - echo "Compiling, build and package..."
    - gradle bootJar
    - gradle generateHelmChart
    - echo "Build."
  artifacts:
    name: "application.jar"
    paths:
      - build/libs/

unit-test-job:   # This job runs in the test stage.
#  stage: test    # It only starts when the job in the build stage completes successfully.
  image: gradle:8.7-jdk21
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - gradle test
    - echo "Code coverage is 90%"

docker-build:
  stage: docker
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $IMAGE_NAME:$CI_COMMIT_SHORT_SHA .
#    - docker login registry.gitlab.com
#    - docker push $IMAGE_NAME:$CI_COMMIT_SHORT_SHA
#  only:
#    - master

#before_script:
#  - echo "$KUBECONFIG_B64" | base64 -d > $KUBECONFIG

deploy-kubectl:      # This job runs in the deploy stage.
#  environment: production
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  image: d3fk/kubectl:latest
  before_script:
    - kubectl version --client
  script:
    - kubectl version --short
#    - kubectl config get-contexts
#    - kubectl config use-context $(kubectl config current-context)
#    - kubectl apply -f manifests/Deployment-and-LoadBalancer-Service.yml
#  only:
#    - master

# Alternative HELM deployment
deploy-helm:
  image: dtzar/helm-kubectl:latest
  stage: deploy
  script:
    - helm version
    - echo "Now you can use helm commands you want"
#    - echo "$KUBECONFIG_B64" | base64 -d > $KUBECONFIG
#    - helm upgrade --install myapp ./chart --namespace=my-namespace --create-namespace
